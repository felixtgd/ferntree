import os
import certifi

from datetime import datetime
from dotenv import load_dotenv
from bson import ObjectId
from motor.motor_asyncio import AsyncIOMotorClient
from pymongo.server_api import ServerApi

# Use certifi to get the path of the CA file
ca = certifi.where()

# Load config from .env file:
load_dotenv("../.env")
MONGODB_URI = os.environ["MONGODB_URI"]
MONGODB_DATABASE = os.environ["MONGODB_DATABASE"]


class MongoClient:
    def __init__(self):
        self.client = AsyncIOMotorClient(
            MONGODB_URI, server_api=ServerApi("1"), tlsCAFile=ca
        )
        self.db = self.client[MONGODB_DATABASE]

    async def insert_one(self, collection: str, document: dict):
        # Insert a document into the collection
        collection = self.db[collection]
        result = await collection.insert_one(document)

        # Return the _id of the inserted document which was generated by MongoDB
        return str(result.inserted_id)

    async def find_one_by_id(self, collection: str, id: str):
        query = {"_id": ObjectId(id)}
        # Find one document in the collection that matches the query
        collection = self.db[collection]
        document = await collection.find_one(query)

        # Return the document
        return document

    async def clean_collection(self, collection: str):
        # Delete all documents in the collection
        collection = self.db[collection]
        await collection.delete_many({})

    async def fetch_timeseries_data(
        self, collection: str, sim_id: str, start_date: int, end_date: int
    ):
        # Fetch the timeseries data of the simulation matching the given date range
        collection = self.db[collection]
        query = {"_id": ObjectId(sim_id)}

        document = await collection.find_one(query)

        timeseries_data = document["timeseries_data"]

        # Filter the timeseries data to only include data within the given date range
        filtered_timeseries_data = [
            data for data in timeseries_data if start_date <= data["time"] <= end_date
        ]

        # Convert "time" from seconds timestamp to ISO datetime
        for data in filtered_timeseries_data:
            data["time"] = datetime.fromtimestamp(data["time"]).strftime(
                "%d-%m-%Y %H:%M"
            )

        return filtered_timeseries_data

    async def close(self):
        self.client.close()
